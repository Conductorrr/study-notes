
CSRF是一种劫持受信任用户向服务器发送非预期请求的攻击方式。

CSRF攻击一般是攻击者借助受害者的Cookie骗取服务器的信任，可以在受害者不知情的情况下以受害者名义伪造请求发送给受攻击服务器，
从而在并未授权的情况下执行在权限保护之下的操作。(Cookie中包含了用户的认证信息)

狭义的CSRF是指黑客已经将代码植入受害用户的浏览器访问的页面的前提下，以受害者的身份向服务端发起一个伪造的http请求，从而实现
CURD来执行读写操作。（这里讲的都是狭义的）

攻击者通过一些技术手段欺骗用户的浏览器去访问用户曾经认证过的网站并执行一些操作（如发送邮件、发消息、甚至财产操作如转账和购买商品等）。
由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web登录身份认证的一个漏洞：简单的身份认证只能保证请求
来自用户的浏览器，但不能识别请求是用户自愿发出的。

黑客写几行js的ajax调用一下服务器的rest接口，对服务器实现CURD（黑客需要先找到xss漏洞，将恶意代码植入到页面中去）
(这样看来csrf和xss有联系，但是csrf的重点在于利用用户的身份执行非本意的操作！)

如，当登录后的用户发起如下 GET 请求时，会删除 ID 指定的帖子：
http://www.c.com:8002/content/delete/87343 
那我们只要把id为87343预测出来就行

由于Cookie中包含了用户的认证信息，当用户访问攻击者准备的攻击环境时，攻击者就可以对服务器发起CSRF攻击。
在这个攻击过程中，攻击者借助受害者的Cookie骗取服务器的信任，但并不能拿到Cookie，也看不到Cookie的内容。而对于服务器返回
的结果，由于浏览器同源策略的限制，攻击者也无法进行解析。因此，攻击者无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，
以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。


(广义的CSRF：黑客将一个http接口中需要传递的所有参数都预测出来，然后他就可以根据他的目的来调用接口，对服务器实现CURD（骗取用户访问这个url）)


如何防范CSRF攻击?
1.Referer Check
HTTP头中的一个字段，记录了该HTTP请求的来源地址。通过Referer Check，可以检查HTTP请求的来源地址是否合法。
2.token验证
服务器下发一个随机Token，每次发起请求时将Token携带上，服务器验证Token是否有效。
CSRF攻击之所以能够成功，是因为攻击者可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于Cookie中，因此攻击者可以在不知道这
些验证信息的情况下直接利用用户自己的Cookie来通过安全验证。要抵御CSRF，关键在于在请求中放入攻击者所不能伪造的信息，并且该信息不存在于
Cookie之中。可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token
或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。
(但是，无论你token隐藏的再深，referer限制的再严格，对于一切都暴露在网站的前台代码中，黑客还是可以根据前台代码分析猜测你这套CSRF防御体系，
然后写一套脚本自动抓去你的token，对你的rest接口实现攻击，在黑客面前你的referer校验只是多余的，伪造成本为0。更强的CSRF防御机制是验证码。)
3.验证码
从上述示例中可以看出，CSRF攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。
比如最常见的图形验证码可以很好得抵御CSRF攻击，但也不是不能破解，只是破解的代价比较高，一般黑客不愿意。而且也不能给网站所有操作都加上验证码，
动不动就弹个验证码，用户体验会很差。所以，比较好的思路是，尽量较少的使用验证码，一些操作不敏感的接口还是以referer+token的方式来做防御。