
在浏览器中将恶意代码植入到页面代码中去，从而对用户客户端进行攻击。
XSS攻击是发生在目标用户的浏览器层面，所以植入的代码一般为JavaScript为主，也有HTML、CSS、Flash。


通过XSS能做的事情：
(感觉其实啥事都能做，因为js代码都是自己写，想干嘛干嘛。主要是：)
对用户浏览器进行控制、获取用户隐私数据等等：拿到用户浏览器的cookie，就可以劫持session，从而变相达到盗取用户账号的目的


可以分为两种类型：持久型（存储型）和非持久型（反射型）
1.持久型就是攻击的代码被服务端写入【数据库】中，从而导致每个正常访问页面的用户都会遭到这段XSS脚本攻击
  比如在一些论坛的评论中，写script标签加alert语句，如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打
  开该页面的用户都会被攻击到。（可能这套B/S系统中刚好存在“前台接收数据存入数据库，在渲染页面时从数据库读取相应信息“这样的逻辑）
  
  当这种appendChild 或者 xxx.innerHTML = 'XXX'(或其他脚本植入方式) 时一定要注意这里插入的字符串可能会被xss攻击，
  当你那接口返回的数据，特别是新建、编辑的数据进行字符串拼接，那可能有保存恶意的script标签、img的onerror等
  数据看板v-show-tip指令

2.非持久型一般是在【url参数】中加入攻击代码，再将这个url散布到网上，骗取用户访问这个连接从而进行攻击。
  比如当浏览器请求 http://xxx/search?keyword="><script>alert('XSS');</script> 时，服务端会解析出请求参数keyword，
  得到 "><script>alert('XSS');</script>，拼接到HTML中返回给浏览器。


(XSS植入脚本、XSS注入的方式有很多，以上2个和下面1个是其中的例子。)


如何防范XSS攻击?
1.转义字符
  转义输入输出的内容（字符吧），对于尖括号、斜杠、引号进行转义。(将恶意代码转义，就不能被执行了)
  在一些前端框架中,如vue，都会有decodingMap，如果输入带script标签的内容，会直接过滤掉
 （但不仅仅是特殊字符（上面例子），标签的href,src等属性中包含javascript: 等可执行代码也会引发XSS攻击，转义了并不高枕无忧👇）
2.CSP白名单
  简单来说，明确告诉浏览器哪些外部资源可以加载和执行。
  通过两种方式来开启 CSP：
  设置 HTTP Header 中的 Content-Security-Policy
  设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy">
  (具体来说，禁止加载外域代码，防止复杂的攻击逻辑。
   禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。
   禁止未授权的脚本执行...)
3.HttpOnly
  带有HttpOnly属性的Cookie只能通过HTTP协议访问，无法通过类似JS这样的脚本语言访问。
  严格来说，HttpOnly并非阻止XSS攻击，而是能阻止XSS攻击后的Cookie劫持攻击。
  
4.项目中使用xss插件